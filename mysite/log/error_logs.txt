2023-09-11 15:04:38 -  download_version: division by zero
2023-09-11 15:07:20 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: division by zero
2023-09-15 16:15:14 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: 'NoneType' object is not subscriptable // Note:serial_number: 5CD3218NZL
2023-11-16 14:18:45 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 1: ... '2023-11-16T14:18:44.925640+08:00'::timestamptz, '') RETURN...
                                                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
 // Note:serial_number: AIW3040052
2023-11-16 14:19:27 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 1: ... '2023-11-16T14:19:27.765592+08:00'::timestamptz, '') RETURN...
                                                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
 // Note:serial_number: AIW3040052
2023-11-16 14:19:53 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 1: ... '2023-11-16T14:19:53.419818+08:00'::timestamptz, '') RETURN...
                                                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
 // Note:serial_number: AIW3040052
2023-11-16 14:19:57 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 1: ... '2023-11-16T14:19:57.441400+08:00'::timestamptz, '') RETURN...
                                                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
 // Note:serial_number: AIW3040052
2023-11-16 14:21:00 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 1: ... '2023-11-16T14:20:59.973860+08:00'::timestamptz, '') RETURN...
                                                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
 // Note:serial_number: AIW3040052
2023-11-16 14:27:09 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 1: ... '2023-11-16T14:27:09.244242+08:00'::timestamptz, '') RETURN...
                                                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
 // Note:serial_number: AIW3040052
2023-11-16 14:27:22 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 1: ... '2023-11-16T14:27:22.786560+08:00'::timestamptz, '') RETURN...
                                                             ^
DETAIL:  The input string ended unexpectedly.
CONTEXT:  JSON data, line 1: 
 // Note:serial_number: AIW3040052
2023-11-16 14:35:08 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 4:             WHERE 1=1 AND pi.platform_info IN ('relax456')
                                                       ^
DETAIL:  Token "relax456" is invalid.
CONTEXT:  JSON data, line 1: relax456
 // Note:serial_number: 123
2023-11-16 14:35:16 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 4:             WHERE 1=1 AND pi.platform_info IN ('relax456')
                                                       ^
DETAIL:  Token "relax456" is invalid.
CONTEXT:  JSON data, line 1: relax456
 // Note:serial_number: 123
2023-11-16 14:36:59 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 4:             WHERE 1=1 AND pi.platform_info IN ('relax456')
                                                       ^
DETAIL:  Token "relax456" is invalid.
CONTEXT:  JSON data, line 1: relax456
 // Note:serial_number: 123
2023-11-16 14:38:12 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 4:             WHERE 1=1 AND pi.platform_info IN ('relax456')
                                                       ^
DETAIL:  Token "relax456" is invalid.
CONTEXT:  JSON data, line 1: relax456
 // Note:serial_number: 123
2023-11-16 14:40:05 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 4:             WHERE 1=1 AND pi.platform_info IN ('relax456')
                                                       ^
DETAIL:  Token "relax456" is invalid.
CONTEXT:  JSON data, line 1: relax456
 // Note:serial_number: 123
2023-11-16 14:40:07 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: invalid input syntax for type json
LINE 4:             WHERE 1=1 AND pi.platform_info IN ('relax456')
                                                       ^
DETAIL:  Token "relax456" is invalid.
CONTEXT:  JSON data, line 1: relax456
 // Note:serial_number: 123
2023-11-16 17:58:41 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-16 18:03:51 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-16 18:05:34 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 11:44:04 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 11:51:16 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 11:55:05 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 11:56:42 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 11:58:00 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 12:00:29 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 12:03:40 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 12:05:06 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 12:09:53 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 15:35:49 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/new_machine: can't adapt type 'dict' // Note:serial_number: 0001760WGW
2023-11-17 16:55:07 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/end_task_machine: missing FROM-clause entry for table "ul"
LINE 4:         WHERE 1=1 AND ul.serial_number IN (NULL)
                              ^
 // Note:serial_number: None
2023-11-17 17:02:57 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/end_task_machine: syntax error at or near "AND"
LINE 4:         WHERE finish_time is null and AND ut.test_unit_id IN...
                                              ^
 // Note:test_unit_list_id: 68
2023-11-30 17:04:23 -  C:\Users\CHBI965\Desktop\HP\mysite\cth\cth_views.py/issue_create: invalid input syntax for type timestamp with time zone: "your_add_time"
LINE 1: ...power_state": "your_power_state"}', 'your_level', 'your_add_...
                                                             ^
 // Note:serial_number: 0001760WGW
2024-02-21 15:05:10 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: C:\Users\CHBI965\AppData\Local\Temp\tmph_ccx9xs\3.3.3.3.zip does not exist // Note:None
2024-02-21 15:12:10 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: C:\Users\CHBI965\AppData\Local\Temp\tmpber10jd9\3.3.3.3.zip does not exist // Note:None
2024-02-21 15:20:59 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: C:\Users\CHBI965\AppData\Local\Temp\tmp0vu15evq\1.1.1.1.zip does not exist // Note:None
2024-02-21 15:22:49 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: C:\Users\CHBI965\AppData\Local\Temp\tmpv_ys6ppy\1.1.1.1.zip does not exist // Note:None
2024-02-21 15:24:16 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: C:\Users\CHBI965\AppData\Local\Temp\tmpz1w0xyy5\3.3.3.3.zip does not exist // Note:None
2024-02-21 15:26:39 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 13] Permission denied: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmpqk8j1hcf' // Note:None
2024-02-21 15:33:34 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: C:\Users\CHBI965\AppData\Local\Temp\tmpr7npg3uq\folder does not exist // Note:None
2024-02-21 15:34:23 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 13] Permission denied: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmpnumh3nn1' // Note:None
2024-02-21 15:35:16 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 13] Permission denied: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmpa5w6wmw2' // Note:None
2024-02-21 15:36:10 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 13] Permission denied: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmpmivp764q' // Note:None
2024-02-21 15:36:11 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 13] Permission denied: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmpbv1l7tvn' // Note:None
2024-02-21 15:37:59 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 13] Permission denied: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmpfnb3j3ik' // Note:None
2024-02-21 15:38:49 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: unsupported operand type(s) for /: 'str' and 'str' // Note:None
2024-02-21 15:38:53 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: unsupported operand type(s) for /: 'str' and 'str' // Note:None
2024-02-21 16:04:32 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 2] No such file or directory: b'import os\r\nimport subprocess\r\nimport json\r\nimport sys\r\nimport psycopg2\r\nimport pytz\r\nfrom datetime import datetime\r\nimport tkinter as tk\r\nimport tkinter.messagebox as messagebox\r\nimport random\r\nimport inspect\r\nimport typer\r\nimport ast\r\n\r\ndef timenow():\r\n    current_time =  datetime.now()\r\n    timezone = pytz.timezone(\'Asia/Taipei\')\r\n    last_update_time = current_time.astimezone(timezone)\r\n    return last_update_time  \r\n\r\ndef connect_to_database():\r\n    host = "15.36.69.32" #localhost \r\n    dbname = "postgres_all"\r\n    user = "postgres"\r\n    password = "123456789"\r\n    sslmode = "allow"\r\n    conn_string = "host={0} user={1} dbname={2} password={3} sslmode={4}".format(host, user, dbname, password, sslmode)     \r\n    conn = psycopg2.connect(conn_string)\r\n    cursor = conn.cursor()\r\n    def close_database():\r\n        conn.commit()\r\n        cursor.close()\r\n        conn.close()    \r\n    return conn, cursor, close_database\r\n\r\n#script_dir = os.path.dirname(os.path.abspath(__file__))\r\n#base_path = getattr(sys, \'_MEIPASS\', os.getcwd())\r\nexe_dir = os.path.dirname(sys.executable) #current_run_location\r\nrelative_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.exe\' \r\nfile_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.json\' \r\nuut_info_path = os.path.abspath(os.path.join(exe_dir, relative_path))\r\nuut_info_josn_path = os.path.abspath(os.path.join(exe_dir, file_path)) \r\ndef uut_info_active(exe_path):\r\n    current_dir = os.path.dirname(os.path.abspath(__file__)) #current_file_location\r\n    #exe_path = os.path.join(current_dir, relative_path)\r\n    runas_path = os.path.join(os.environ[\'SystemRoot\'], \'System32\', \'runas.exe\')\r\n    try: \r\n        subprocess.run([exe_path], check=True, shell=True)\r\n    except FileNotFoundError:\r\n        print(f"no file: {exe_path}")\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n\r\ndef SN_Product_name_get(file_path):\r\n    with open(file_path, \'r\', encoding=\'utf-8\') as file:\r\n        file_contents = file.read()\r\n    data = json.loads(file_contents)\r\n    key_SN = "Serial_Number"\r\n    key_Product_name = "Model"\r\n    return data[key_SN],data[key_Product_name],file_contents\r\n\r\ndef random_string(random_number):\r\n    request_info = \'{  \\"tool_name\\": \\"PowerStressTest\\",  \\"script_name\\": \\"WlanIntetface-Web-Restart\\",  \\"tool_version\\": \\"2.0.6.3(1.0.2.9)\\"}\'\r\n    test_result = \'{ \\"s0\\": { \\"Idle\\":{\\"unit\\": \\"min\\",\\"count\\": \\"332\\"}, \\"AirplaneMode\\":{ \\"unit\\": \\"round\\", \\"count\\": \\"17\\" }, \\"OnlineStreaming-Test\\":{ \\"unit\\": \\"min\\", \\"count\\": \\"94\\"}}, \\"s4\\": 4, \\"s0i3\\": 4, \\"total\\": 17, \\"restart\\": 6, \\"s0i3tos4\\": 3}\'\r\n    #random_number = random.randint(0, 1)\r\n    if random_number == 0:\r\n        print(request_info)\r\n        return request_info\r\n    else:\r\n        print(test_result)\r\n        return test_result\r\n\r\ndef test_unit_list_approval(serial_number):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        serial_number_condition = f"AND tul.serial_number IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_list AS tul\r\n        WHERE 1=1 {serial_number_condition}\r\n        \'\'\'\r\n        cursor.execute(query, (serial_number,))\r\n        result_SN = cursor.fetchone()\r\n        close_database()\r\n        if result_SN:\r\n            [id, status] = result_SN\r\n            return id, status\r\n        else:\r\n            return None\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n        print("Error: database connection error")\r\n\r\ndef return_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        close_database()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            return {"tool": "", "task_id": f"{task_id}", "round": 0, "runtime": 0, "script": newstatus, "config": {}}\r\n        else:\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\ndef machine_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        last_update_time = timenow()\r\n        query = f\'\'\'\r\n        UPDATE test_unit_list\r\n        SET status = %s, last_update_time = %s\r\n        WHERE id = %s;\r\n        \'\'\'\r\n        cursor.execute(query, (status,) + (last_update_time,) + (sn_id,)) \r\n\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            if status == newstatus:\r\n                cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (task_id,))\r\n                close_database()\r\n                return 0\r\n            else:\r\n                close_database()    \r\n                return {\'tool\': \'\', \'task_id\': f\'{task_id}\', \'round\': 0, \'runtime\': 0, \'script\': newstatus, \'config\': {}}\r\n        else:\r\n            close_database()\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\n\r\ndef unit_test_start(serial_number, product_name, uut_info, request_info):\r\n    try:\r\n        request_info_json = json.dumps(request_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            sys.exit(-1)\r\n        else:\r\n            try:\r\n                status = \'running\'\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s\r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (status,) + (last_update_time,) +  (uut_info,) + (serial_number,)) \r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], request_info_json, uut_info, status, last_update_time))\r\n                result_unit_task_id = cursor.fetchone()\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n    else:  \r\n        status = \'running\'\r\n        last_update_time = timenow()\r\n        platform_id = 1  #\xe9\xa0\x90\xe8\xa8\xad////\xe9\x80\x99\xe8\xa6\x81\xe6\x94\xb9\r\n        try:\r\n            cursor.execute("INSERT INTO test_unit_list (platform_id, serial_number, status, last_update_time, uut_info) VALUES (%s, %s, %s, %s, %s) RETURNING id", (platform_id, serial_number, status, last_update_time, uut_info)) \r\n            result_unit_list_id = cursor.fetchone()\r\n            print(result_unit_list_id)\r\n            cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (result_unit_list_id[0], request_info_json, uut_info, status, last_update_time))\r\n            result_unit_task_id = cursor.fetchone()\r\n            close_database()\r\n            return 0\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)\r\n\r\n\r\ndef unit_test_finish(serial_number, product_name, uut_info, finish_info):\r\n    try:\r\n        finish_info_json = json.dumps(finish_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            last_update_time = timenow()\r\n            try:\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'idle\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, uut_info, status, result_info, finish_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], uut_info, \'finish\', finish_info_json, last_update_time))\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_idle(serial_number, product_name, uut_info):\r\n    try:\r\n        [SN_id, status] = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if status == \'idle\':\r\n            sys.exit(return_running_commands(SN_id, status)) \r\n        elif status == \'running\':\r\n            try:\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'running\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n            sys.exit(2) #running \r\n        elif status == \'pause\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'pause\', \'config\': {}}"\r\n        elif status == \'finish\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'finish\', \'config\': {}}"    \r\n        else:   \r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_running(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'running\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)        \r\n\r\ndef unit_test_pause(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'pause\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)\r\n\r\n\r\ndef CTH(request_mode:str):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(None)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if sn_pn[0]:\r\n        if request_mode.startswith(\'create_task\'):\r\n            request_info = request_mode[len(\'create_task \'):]\r\n            return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_info)\r\n        if request_mode.startswith(\'power_cycle_info\'):\r\n            test_result = request_mode[len(\'power_cycle_info \'):]\r\n            return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=test_result)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\napp = typer.Typer()\r\n@app.command()\r\ndef create_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n@app.command()\r\ndef end_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n     \r\n@app.command()\r\ndef GetNewTask(command:str, issue:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        if command == \'idle\':\r\n            return unit_test_idle(serial_number=serial_number, product_name=product_name, uut_info=file_content)\r\n        elif command == \'running\':\r\n            return unit_test_running(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        elif command == \'pause\':\r\n            return unit_test_pause(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        else:\r\n            sys.exit(2)  \r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n@app.command()\r\ndef SetNewTaskReady(taskid:int):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        try:\r\n            [SN_id, status] = test_unit_list_approval(serial_number)\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)  \r\n        if SN_id:\r\n            try:\r\n                conn, cursor, close_database = connect_to_database()\r\n                query = f\'\'\'\r\n                SELECT status\r\n                FROM test_unit_tasks\r\n                WHERE id = %s \r\n                \'\'\'\r\n                cursor.execute(query, (taskid,))\r\n                result_status = cursor.fetchone()\r\n                if result_status:\r\n                    try:\r\n                        [status] = result_status\r\n                        cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (taskid,))\r\n                        last_update_time = timenow()\r\n                        query = f\'\'\'\r\n                        UPDATE test_unit_list\r\n                        SET status = %s, last_update_time = %s\r\n                        WHERE serial_number = %s\r\n                        \'\'\'\r\n                        cursor.execute(query, (status,) + (last_update_time,) + (serial_number,)) \r\n                        close_database()\r\n                        print(0)\r\n                        sys.exit(0)\r\n                    except Exception as e:\r\n                        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                        sys.exit(1)\r\n                else:\r\n                    sys.exit(-5)\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-2)\r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n\r\nif __name__ == "__main__":\r\n    app()\r\n\r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n#SetNewTaskReady+SN()+""+TaskID\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ' // Note:None
2024-02-21 16:04:56 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [Errno 2] No such file or directory: b'import os\r\nimport subprocess\r\nimport json\r\nimport sys\r\nimport psycopg2\r\nimport pytz\r\nfrom datetime import datetime\r\nimport tkinter as tk\r\nimport tkinter.messagebox as messagebox\r\nimport random\r\nimport inspect\r\nimport typer\r\nimport ast\r\n\r\ndef timenow():\r\n    current_time =  datetime.now()\r\n    timezone = pytz.timezone(\'Asia/Taipei\')\r\n    last_update_time = current_time.astimezone(timezone)\r\n    return last_update_time  \r\n\r\ndef connect_to_database():\r\n    host = "15.36.69.32" #localhost \r\n    dbname = "postgres_all"\r\n    user = "postgres"\r\n    password = "123456789"\r\n    sslmode = "allow"\r\n    conn_string = "host={0} user={1} dbname={2} password={3} sslmode={4}".format(host, user, dbname, password, sslmode)     \r\n    conn = psycopg2.connect(conn_string)\r\n    cursor = conn.cursor()\r\n    def close_database():\r\n        conn.commit()\r\n        cursor.close()\r\n        conn.close()    \r\n    return conn, cursor, close_database\r\n\r\n#script_dir = os.path.dirname(os.path.abspath(__file__))\r\n#base_path = getattr(sys, \'_MEIPASS\', os.getcwd())\r\nexe_dir = os.path.dirname(sys.executable) #current_run_location\r\nrelative_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.exe\' \r\nfile_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.json\' \r\nuut_info_path = os.path.abspath(os.path.join(exe_dir, relative_path))\r\nuut_info_josn_path = os.path.abspath(os.path.join(exe_dir, file_path)) \r\ndef uut_info_active(exe_path):\r\n    current_dir = os.path.dirname(os.path.abspath(__file__)) #current_file_location\r\n    #exe_path = os.path.join(current_dir, relative_path)\r\n    runas_path = os.path.join(os.environ[\'SystemRoot\'], \'System32\', \'runas.exe\')\r\n    try: \r\n        subprocess.run([exe_path], check=True, shell=True)\r\n    except FileNotFoundError:\r\n        print(f"no file: {exe_path}")\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n\r\ndef SN_Product_name_get(file_path):\r\n    with open(file_path, \'r\', encoding=\'utf-8\') as file:\r\n        file_contents = file.read()\r\n    data = json.loads(file_contents)\r\n    key_SN = "Serial_Number"\r\n    key_Product_name = "Model"\r\n    return data[key_SN],data[key_Product_name],file_contents\r\n\r\ndef random_string(random_number):\r\n    request_info = \'{  \\"tool_name\\": \\"PowerStressTest\\",  \\"script_name\\": \\"WlanIntetface-Web-Restart\\",  \\"tool_version\\": \\"2.0.6.3(1.0.2.9)\\"}\'\r\n    test_result = \'{ \\"s0\\": { \\"Idle\\":{\\"unit\\": \\"min\\",\\"count\\": \\"332\\"}, \\"AirplaneMode\\":{ \\"unit\\": \\"round\\", \\"count\\": \\"17\\" }, \\"OnlineStreaming-Test\\":{ \\"unit\\": \\"min\\", \\"count\\": \\"94\\"}}, \\"s4\\": 4, \\"s0i3\\": 4, \\"total\\": 17, \\"restart\\": 6, \\"s0i3tos4\\": 3}\'\r\n    #random_number = random.randint(0, 1)\r\n    if random_number == 0:\r\n        print(request_info)\r\n        return request_info\r\n    else:\r\n        print(test_result)\r\n        return test_result\r\n\r\ndef test_unit_list_approval(serial_number):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        serial_number_condition = f"AND tul.serial_number IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_list AS tul\r\n        WHERE 1=1 {serial_number_condition}\r\n        \'\'\'\r\n        cursor.execute(query, (serial_number,))\r\n        result_SN = cursor.fetchone()\r\n        close_database()\r\n        if result_SN:\r\n            [id, status] = result_SN\r\n            return id, status\r\n        else:\r\n            return None\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n        print("Error: database connection error")\r\n\r\ndef return_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        close_database()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            return {"tool": "", "task_id": f"{task_id}", "round": 0, "runtime": 0, "script": newstatus, "config": {}}\r\n        else:\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\ndef machine_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        last_update_time = timenow()\r\n        query = f\'\'\'\r\n        UPDATE test_unit_list\r\n        SET status = %s, last_update_time = %s\r\n        WHERE id = %s;\r\n        \'\'\'\r\n        cursor.execute(query, (status,) + (last_update_time,) + (sn_id,)) \r\n\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            if status == newstatus:\r\n                cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (task_id,))\r\n                close_database()\r\n                return 0\r\n            else:\r\n                close_database()    \r\n                return {\'tool\': \'\', \'task_id\': f\'{task_id}\', \'round\': 0, \'runtime\': 0, \'script\': newstatus, \'config\': {}}\r\n        else:\r\n            close_database()\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\n\r\ndef unit_test_start(serial_number, product_name, uut_info, request_info):\r\n    try:\r\n        request_info_json = json.dumps(request_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            sys.exit(-1)\r\n        else:\r\n            try:\r\n                status = \'running\'\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s\r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (status,) + (last_update_time,) +  (uut_info,) + (serial_number,)) \r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], request_info_json, uut_info, status, last_update_time))\r\n                result_unit_task_id = cursor.fetchone()\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n    else:  \r\n        status = \'running\'\r\n        last_update_time = timenow()\r\n        platform_id = 1  #\xe9\xa0\x90\xe8\xa8\xad////\xe9\x80\x99\xe8\xa6\x81\xe6\x94\xb9\r\n        try:\r\n            cursor.execute("INSERT INTO test_unit_list (platform_id, serial_number, status, last_update_time, uut_info) VALUES (%s, %s, %s, %s, %s) RETURNING id", (platform_id, serial_number, status, last_update_time, uut_info)) \r\n            result_unit_list_id = cursor.fetchone()\r\n            print(result_unit_list_id)\r\n            cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (result_unit_list_id[0], request_info_json, uut_info, status, last_update_time))\r\n            result_unit_task_id = cursor.fetchone()\r\n            close_database()\r\n            return 0\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)\r\n\r\n\r\ndef unit_test_finish(serial_number, product_name, uut_info, finish_info):\r\n    try:\r\n        finish_info_json = json.dumps(finish_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            last_update_time = timenow()\r\n            try:\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'idle\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, uut_info, status, result_info, finish_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], uut_info, \'finish\', finish_info_json, last_update_time))\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_idle(serial_number, product_name, uut_info):\r\n    try:\r\n        [SN_id, status] = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if status == \'idle\':\r\n            sys.exit(return_running_commands(SN_id, status)) \r\n        elif status == \'running\':\r\n            try:\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'running\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n            sys.exit(2) #running \r\n        elif status == \'pause\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'pause\', \'config\': {}}"\r\n        elif status == \'finish\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'finish\', \'config\': {}}"    \r\n        else:   \r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_running(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'running\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)        \r\n\r\ndef unit_test_pause(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'pause\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)\r\n\r\n\r\ndef CTH(request_mode:str):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(None)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if sn_pn[0]:\r\n        if request_mode.startswith(\'create_task\'):\r\n            request_info = request_mode[len(\'create_task \'):]\r\n            return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_info)\r\n        if request_mode.startswith(\'power_cycle_info\'):\r\n            test_result = request_mode[len(\'power_cycle_info \'):]\r\n            return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=test_result)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\napp = typer.Typer()\r\n@app.command()\r\ndef create_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n@app.command()\r\ndef end_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n     \r\n@app.command()\r\ndef GetNewTask(command:str, issue:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        if command == \'idle\':\r\n            return unit_test_idle(serial_number=serial_number, product_name=product_name, uut_info=file_content)\r\n        elif command == \'running\':\r\n            return unit_test_running(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        elif command == \'pause\':\r\n            return unit_test_pause(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        else:\r\n            sys.exit(2)  \r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n@app.command()\r\ndef SetNewTaskReady(taskid:int):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        try:\r\n            [SN_id, status] = test_unit_list_approval(serial_number)\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)  \r\n        if SN_id:\r\n            try:\r\n                conn, cursor, close_database = connect_to_database()\r\n                query = f\'\'\'\r\n                SELECT status\r\n                FROM test_unit_tasks\r\n                WHERE id = %s \r\n                \'\'\'\r\n                cursor.execute(query, (taskid,))\r\n                result_status = cursor.fetchone()\r\n                if result_status:\r\n                    try:\r\n                        [status] = result_status\r\n                        cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (taskid,))\r\n                        last_update_time = timenow()\r\n                        query = f\'\'\'\r\n                        UPDATE test_unit_list\r\n                        SET status = %s, last_update_time = %s\r\n                        WHERE serial_number = %s\r\n                        \'\'\'\r\n                        cursor.execute(query, (status,) + (last_update_time,) + (serial_number,)) \r\n                        close_database()\r\n                        print(0)\r\n                        sys.exit(0)\r\n                    except Exception as e:\r\n                        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                        sys.exit(1)\r\n                else:\r\n                    sys.exit(-5)\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-2)\r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n\r\nif __name__ == "__main__":\r\n    app()\r\n\r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n#SetNewTaskReady+SN()+""+TaskID\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ' // Note:None
2024-02-21 17:10:43 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [WinError 3] The system cannot find the path specified: b'import os\r\nimport subprocess\r\nimport json\r\nimport sys\r\nimport psycopg2\r\nimport pytz\r\nfrom datetime import datetime\r\nimport tkinter as tk\r\nimport tkinter.messagebox as messagebox\r\nimport random\r\nimport inspect\r\nimport typer\r\nimport ast\r\n\r\ndef timenow():\r\n    current_time =  datetime.now()\r\n    timezone = pytz.timezone(\'Asia/Taipei\')\r\n    last_update_time = current_time.astimezone(timezone)\r\n    return last_update_time  \r\n\r\ndef connect_to_database():\r\n    host = "15.36.69.32" #localhost \r\n    dbname = "postgres_all"\r\n    user = "postgres"\r\n    password = "123456789"\r\n    sslmode = "allow"\r\n    conn_string = "host={0} user={1} dbname={2} password={3} sslmode={4}".format(host, user, dbname, password, sslmode)     \r\n    conn = psycopg2.connect(conn_string)\r\n    cursor = conn.cursor()\r\n    def close_database():\r\n        conn.commit()\r\n        cursor.close()\r\n        conn.close()    \r\n    return conn, cursor, close_database\r\n\r\n#script_dir = os.path.dirname(os.path.abspath(__file__))\r\n#base_path = getattr(sys, \'_MEIPASS\', os.getcwd())\r\nexe_dir = os.path.dirname(sys.executable) #current_run_location\r\nrelative_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.exe\' \r\nfile_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.json\' \r\nuut_info_path = os.path.abspath(os.path.join(exe_dir, relative_path))\r\nuut_info_josn_path = os.path.abspath(os.path.join(exe_dir, file_path)) \r\ndef uut_info_active(exe_path):\r\n    current_dir = os.path.dirname(os.path.abspath(__file__)) #current_file_location\r\n    #exe_path = os.path.join(current_dir, relative_path)\r\n    runas_path = os.path.join(os.environ[\'SystemRoot\'], \'System32\', \'runas.exe\')\r\n    try: \r\n        subprocess.run([exe_path], check=True, shell=True)\r\n    except FileNotFoundError:\r\n        print(f"no file: {exe_path}")\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n\r\ndef SN_Product_name_get(file_path):\r\n    with open(file_path, \'r\', encoding=\'utf-8\') as file:\r\n        file_contents = file.read()\r\n    data = json.loads(file_contents)\r\n    key_SN = "Serial_Number"\r\n    key_Product_name = "Model"\r\n    return data[key_SN],data[key_Product_name],file_contents\r\n\r\ndef random_string(random_number):\r\n    request_info = \'{  \\"tool_name\\": \\"PowerStressTest\\",  \\"script_name\\": \\"WlanIntetface-Web-Restart\\",  \\"tool_version\\": \\"2.0.6.3(1.0.2.9)\\"}\'\r\n    test_result = \'{ \\"s0\\": { \\"Idle\\":{\\"unit\\": \\"min\\",\\"count\\": \\"332\\"}, \\"AirplaneMode\\":{ \\"unit\\": \\"round\\", \\"count\\": \\"17\\" }, \\"OnlineStreaming-Test\\":{ \\"unit\\": \\"min\\", \\"count\\": \\"94\\"}}, \\"s4\\": 4, \\"s0i3\\": 4, \\"total\\": 17, \\"restart\\": 6, \\"s0i3tos4\\": 3}\'\r\n    #random_number = random.randint(0, 1)\r\n    if random_number == 0:\r\n        print(request_info)\r\n        return request_info\r\n    else:\r\n        print(test_result)\r\n        return test_result\r\n\r\ndef test_unit_list_approval(serial_number):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        serial_number_condition = f"AND tul.serial_number IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_list AS tul\r\n        WHERE 1=1 {serial_number_condition}\r\n        \'\'\'\r\n        cursor.execute(query, (serial_number,))\r\n        result_SN = cursor.fetchone()\r\n        close_database()\r\n        if result_SN:\r\n            [id, status] = result_SN\r\n            return id, status\r\n        else:\r\n            return None\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n        print("Error: database connection error")\r\n\r\ndef return_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        close_database()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            return {"tool": "", "task_id": f"{task_id}", "round": 0, "runtime": 0, "script": newstatus, "config": {}}\r\n        else:\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\ndef machine_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        last_update_time = timenow()\r\n        query = f\'\'\'\r\n        UPDATE test_unit_list\r\n        SET status = %s, last_update_time = %s\r\n        WHERE id = %s;\r\n        \'\'\'\r\n        cursor.execute(query, (status,) + (last_update_time,) + (sn_id,)) \r\n\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            if status == newstatus:\r\n                cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (task_id,))\r\n                close_database()\r\n                return 0\r\n            else:\r\n                close_database()    \r\n                return {\'tool\': \'\', \'task_id\': f\'{task_id}\', \'round\': 0, \'runtime\': 0, \'script\': newstatus, \'config\': {}}\r\n        else:\r\n            close_database()\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\n\r\ndef unit_test_start(serial_number, product_name, uut_info, request_info):\r\n    try:\r\n        request_info_json = json.dumps(request_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            sys.exit(-1)\r\n        else:\r\n            try:\r\n                status = \'running\'\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s\r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (status,) + (last_update_time,) +  (uut_info,) + (serial_number,)) \r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], request_info_json, uut_info, status, last_update_time))\r\n                result_unit_task_id = cursor.fetchone()\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n    else:  \r\n        status = \'running\'\r\n        last_update_time = timenow()\r\n        platform_id = 1  #\xe9\xa0\x90\xe8\xa8\xad////\xe9\x80\x99\xe8\xa6\x81\xe6\x94\xb9\r\n        try:\r\n            cursor.execute("INSERT INTO test_unit_list (platform_id, serial_number, status, last_update_time, uut_info) VALUES (%s, %s, %s, %s, %s) RETURNING id", (platform_id, serial_number, status, last_update_time, uut_info)) \r\n            result_unit_list_id = cursor.fetchone()\r\n            print(result_unit_list_id)\r\n            cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (result_unit_list_id[0], request_info_json, uut_info, status, last_update_time))\r\n            result_unit_task_id = cursor.fetchone()\r\n            close_database()\r\n            return 0\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)\r\n\r\n\r\ndef unit_test_finish(serial_number, product_name, uut_info, finish_info):\r\n    try:\r\n        finish_info_json = json.dumps(finish_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            last_update_time = timenow()\r\n            try:\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'idle\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, uut_info, status, result_info, finish_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], uut_info, \'finish\', finish_info_json, last_update_time))\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_idle(serial_number, product_name, uut_info):\r\n    try:\r\n        [SN_id, status] = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if status == \'idle\':\r\n            sys.exit(return_running_commands(SN_id, status)) \r\n        elif status == \'running\':\r\n            try:\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'running\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n            sys.exit(2) #running \r\n        elif status == \'pause\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'pause\', \'config\': {}}"\r\n        elif status == \'finish\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'finish\', \'config\': {}}"    \r\n        else:   \r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_running(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'running\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)        \r\n\r\ndef unit_test_pause(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'pause\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)\r\n\r\n\r\ndef CTH(request_mode:str):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(None)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if sn_pn[0]:\r\n        if request_mode.startswith(\'create_task\'):\r\n            request_info = request_mode[len(\'create_task \'):]\r\n            return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_info)\r\n        if request_mode.startswith(\'power_cycle_info\'):\r\n            test_result = request_mode[len(\'power_cycle_info \'):]\r\n            return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=test_result)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\napp = typer.Typer()\r\n@app.command()\r\ndef create_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n@app.command()\r\ndef end_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n     \r\n@app.command()\r\ndef GetNewTask(command:str, issue:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        if command == \'idle\':\r\n            return unit_test_idle(serial_number=serial_number, product_name=product_name, uut_info=file_content)\r\n        elif command == \'running\':\r\n            return unit_test_running(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        elif command == \'pause\':\r\n            return unit_test_pause(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        else:\r\n            sys.exit(2)  \r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n@app.command()\r\ndef SetNewTaskReady(taskid:int):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        try:\r\n            [SN_id, status] = test_unit_list_approval(serial_number)\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)  \r\n        if SN_id:\r\n            try:\r\n                conn, cursor, close_database = connect_to_database()\r\n                query = f\'\'\'\r\n                SELECT status\r\n                FROM test_unit_tasks\r\n                WHERE id = %s \r\n                \'\'\'\r\n                cursor.execute(query, (taskid,))\r\n                result_status = cursor.fetchone()\r\n                if result_status:\r\n                    try:\r\n                        [status] = result_status\r\n                        cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (taskid,))\r\n                        last_update_time = timenow()\r\n                        query = f\'\'\'\r\n                        UPDATE test_unit_list\r\n                        SET status = %s, last_update_time = %s\r\n                        WHERE serial_number = %s\r\n                        \'\'\'\r\n                        cursor.execute(query, (status,) + (last_update_time,) + (serial_number,)) \r\n                        close_database()\r\n                        print(0)\r\n                        sys.exit(0)\r\n                    except Exception as e:\r\n                        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                        sys.exit(1)\r\n                else:\r\n                    sys.exit(-5)\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-2)\r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n\r\nif __name__ == "__main__":\r\n    app()\r\n\r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n#SetNewTaskReady+SN()+""+TaskID\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ' // Note:None
2024-02-21 17:11:33 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [WinError 3] The system cannot find the path specified: b'import os\r\nimport subprocess\r\nimport json\r\nimport sys\r\nimport psycopg2\r\nimport pytz\r\nfrom datetime import datetime\r\nimport tkinter as tk\r\nimport tkinter.messagebox as messagebox\r\nimport random\r\nimport inspect\r\nimport typer\r\nimport ast\r\n\r\ndef timenow():\r\n    current_time =  datetime.now()\r\n    timezone = pytz.timezone(\'Asia/Taipei\')\r\n    last_update_time = current_time.astimezone(timezone)\r\n    return last_update_time  \r\n\r\ndef connect_to_database():\r\n    host = "15.36.69.32" #localhost \r\n    dbname = "postgres_all"\r\n    user = "postgres"\r\n    password = "123456789"\r\n    sslmode = "allow"\r\n    conn_string = "host={0} user={1} dbname={2} password={3} sslmode={4}".format(host, user, dbname, password, sslmode)     \r\n    conn = psycopg2.connect(conn_string)\r\n    cursor = conn.cursor()\r\n    def close_database():\r\n        conn.commit()\r\n        cursor.close()\r\n        conn.close()    \r\n    return conn, cursor, close_database\r\n\r\n#script_dir = os.path.dirname(os.path.abspath(__file__))\r\n#base_path = getattr(sys, \'_MEIPASS\', os.getcwd())\r\nexe_dir = os.path.dirname(sys.executable) #current_run_location\r\nrelative_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.exe\' \r\nfile_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.json\' \r\nuut_info_path = os.path.abspath(os.path.join(exe_dir, relative_path))\r\nuut_info_josn_path = os.path.abspath(os.path.join(exe_dir, file_path)) \r\ndef uut_info_active(exe_path):\r\n    current_dir = os.path.dirname(os.path.abspath(__file__)) #current_file_location\r\n    #exe_path = os.path.join(current_dir, relative_path)\r\n    runas_path = os.path.join(os.environ[\'SystemRoot\'], \'System32\', \'runas.exe\')\r\n    try: \r\n        subprocess.run([exe_path], check=True, shell=True)\r\n    except FileNotFoundError:\r\n        print(f"no file: {exe_path}")\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n\r\ndef SN_Product_name_get(file_path):\r\n    with open(file_path, \'r\', encoding=\'utf-8\') as file:\r\n        file_contents = file.read()\r\n    data = json.loads(file_contents)\r\n    key_SN = "Serial_Number"\r\n    key_Product_name = "Model"\r\n    return data[key_SN],data[key_Product_name],file_contents\r\n\r\ndef random_string(random_number):\r\n    request_info = \'{  \\"tool_name\\": \\"PowerStressTest\\",  \\"script_name\\": \\"WlanIntetface-Web-Restart\\",  \\"tool_version\\": \\"2.0.6.3(1.0.2.9)\\"}\'\r\n    test_result = \'{ \\"s0\\": { \\"Idle\\":{\\"unit\\": \\"min\\",\\"count\\": \\"332\\"}, \\"AirplaneMode\\":{ \\"unit\\": \\"round\\", \\"count\\": \\"17\\" }, \\"OnlineStreaming-Test\\":{ \\"unit\\": \\"min\\", \\"count\\": \\"94\\"}}, \\"s4\\": 4, \\"s0i3\\": 4, \\"total\\": 17, \\"restart\\": 6, \\"s0i3tos4\\": 3}\'\r\n    #random_number = random.randint(0, 1)\r\n    if random_number == 0:\r\n        print(request_info)\r\n        return request_info\r\n    else:\r\n        print(test_result)\r\n        return test_result\r\n\r\ndef test_unit_list_approval(serial_number):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        serial_number_condition = f"AND tul.serial_number IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_list AS tul\r\n        WHERE 1=1 {serial_number_condition}\r\n        \'\'\'\r\n        cursor.execute(query, (serial_number,))\r\n        result_SN = cursor.fetchone()\r\n        close_database()\r\n        if result_SN:\r\n            [id, status] = result_SN\r\n            return id, status\r\n        else:\r\n            return None\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n        print("Error: database connection error")\r\n\r\ndef return_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        close_database()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            return {"tool": "", "task_id": f"{task_id}", "round": 0, "runtime": 0, "script": newstatus, "config": {}}\r\n        else:\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\ndef machine_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        last_update_time = timenow()\r\n        query = f\'\'\'\r\n        UPDATE test_unit_list\r\n        SET status = %s, last_update_time = %s\r\n        WHERE id = %s;\r\n        \'\'\'\r\n        cursor.execute(query, (status,) + (last_update_time,) + (sn_id,)) \r\n\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            if status == newstatus:\r\n                cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (task_id,))\r\n                close_database()\r\n                return 0\r\n            else:\r\n                close_database()    \r\n                return {\'tool\': \'\', \'task_id\': f\'{task_id}\', \'round\': 0, \'runtime\': 0, \'script\': newstatus, \'config\': {}}\r\n        else:\r\n            close_database()\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\n\r\ndef unit_test_start(serial_number, product_name, uut_info, request_info):\r\n    try:\r\n        request_info_json = json.dumps(request_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            sys.exit(-1)\r\n        else:\r\n            try:\r\n                status = \'running\'\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s\r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (status,) + (last_update_time,) +  (uut_info,) + (serial_number,)) \r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], request_info_json, uut_info, status, last_update_time))\r\n                result_unit_task_id = cursor.fetchone()\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n    else:  \r\n        status = \'running\'\r\n        last_update_time = timenow()\r\n        platform_id = 1  #\xe9\xa0\x90\xe8\xa8\xad////\xe9\x80\x99\xe8\xa6\x81\xe6\x94\xb9\r\n        try:\r\n            cursor.execute("INSERT INTO test_unit_list (platform_id, serial_number, status, last_update_time, uut_info) VALUES (%s, %s, %s, %s, %s) RETURNING id", (platform_id, serial_number, status, last_update_time, uut_info)) \r\n            result_unit_list_id = cursor.fetchone()\r\n            print(result_unit_list_id)\r\n            cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (result_unit_list_id[0], request_info_json, uut_info, status, last_update_time))\r\n            result_unit_task_id = cursor.fetchone()\r\n            close_database()\r\n            return 0\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)\r\n\r\n\r\ndef unit_test_finish(serial_number, product_name, uut_info, finish_info):\r\n    try:\r\n        finish_info_json = json.dumps(finish_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            last_update_time = timenow()\r\n            try:\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'idle\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, uut_info, status, result_info, finish_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], uut_info, \'finish\', finish_info_json, last_update_time))\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_idle(serial_number, product_name, uut_info):\r\n    try:\r\n        [SN_id, status] = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if status == \'idle\':\r\n            sys.exit(return_running_commands(SN_id, status)) \r\n        elif status == \'running\':\r\n            try:\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'running\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n            sys.exit(2) #running \r\n        elif status == \'pause\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'pause\', \'config\': {}}"\r\n        elif status == \'finish\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'finish\', \'config\': {}}"    \r\n        else:   \r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_running(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'running\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)        \r\n\r\ndef unit_test_pause(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'pause\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)\r\n\r\n\r\ndef CTH(request_mode:str):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(None)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if sn_pn[0]:\r\n        if request_mode.startswith(\'create_task\'):\r\n            request_info = request_mode[len(\'create_task \'):]\r\n            return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_info)\r\n        if request_mode.startswith(\'power_cycle_info\'):\r\n            test_result = request_mode[len(\'power_cycle_info \'):]\r\n            return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=test_result)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\napp = typer.Typer()\r\n@app.command()\r\ndef create_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n@app.command()\r\ndef end_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n     \r\n@app.command()\r\ndef GetNewTask(command:str, issue:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        if command == \'idle\':\r\n            return unit_test_idle(serial_number=serial_number, product_name=product_name, uut_info=file_content)\r\n        elif command == \'running\':\r\n            return unit_test_running(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        elif command == \'pause\':\r\n            return unit_test_pause(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        else:\r\n            sys.exit(2)  \r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n@app.command()\r\ndef SetNewTaskReady(taskid:int):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        try:\r\n            [SN_id, status] = test_unit_list_approval(serial_number)\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)  \r\n        if SN_id:\r\n            try:\r\n                conn, cursor, close_database = connect_to_database()\r\n                query = f\'\'\'\r\n                SELECT status\r\n                FROM test_unit_tasks\r\n                WHERE id = %s \r\n                \'\'\'\r\n                cursor.execute(query, (taskid,))\r\n                result_status = cursor.fetchone()\r\n                if result_status:\r\n                    try:\r\n                        [status] = result_status\r\n                        cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (taskid,))\r\n                        last_update_time = timenow()\r\n                        query = f\'\'\'\r\n                        UPDATE test_unit_list\r\n                        SET status = %s, last_update_time = %s\r\n                        WHERE serial_number = %s\r\n                        \'\'\'\r\n                        cursor.execute(query, (status,) + (last_update_time,) + (serial_number,)) \r\n                        close_database()\r\n                        print(0)\r\n                        sys.exit(0)\r\n                    except Exception as e:\r\n                        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                        sys.exit(1)\r\n                else:\r\n                    sys.exit(-5)\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-2)\r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n\r\nif __name__ == "__main__":\r\n    app()\r\n\r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n#SetNewTaskReady+SN()+""+TaskID\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ' // Note:None
2024-02-21 17:12:07 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [WinError 3] The system cannot find the path specified: b'import os\r\nimport subprocess\r\nimport json\r\nimport sys\r\nimport psycopg2\r\nimport pytz\r\nfrom datetime import datetime\r\nimport tkinter as tk\r\nimport tkinter.messagebox as messagebox\r\nimport random\r\nimport inspect\r\nimport typer\r\nimport ast\r\n\r\ndef timenow():\r\n    current_time =  datetime.now()\r\n    timezone = pytz.timezone(\'Asia/Taipei\')\r\n    last_update_time = current_time.astimezone(timezone)\r\n    return last_update_time  \r\n\r\ndef connect_to_database():\r\n    host = "15.36.69.32" #localhost \r\n    dbname = "postgres_all"\r\n    user = "postgres"\r\n    password = "123456789"\r\n    sslmode = "allow"\r\n    conn_string = "host={0} user={1} dbname={2} password={3} sslmode={4}".format(host, user, dbname, password, sslmode)     \r\n    conn = psycopg2.connect(conn_string)\r\n    cursor = conn.cursor()\r\n    def close_database():\r\n        conn.commit()\r\n        cursor.close()\r\n        conn.close()    \r\n    return conn, cursor, close_database\r\n\r\n#script_dir = os.path.dirname(os.path.abspath(__file__))\r\n#base_path = getattr(sys, \'_MEIPASS\', os.getcwd())\r\nexe_dir = os.path.dirname(sys.executable) #current_run_location\r\nrelative_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.exe\' \r\nfile_path = \'uut_info 1.0.0.5\\\\uut_info 1.0.0.5\\\\uut_info.json\' \r\nuut_info_path = os.path.abspath(os.path.join(exe_dir, relative_path))\r\nuut_info_josn_path = os.path.abspath(os.path.join(exe_dir, file_path)) \r\ndef uut_info_active(exe_path):\r\n    current_dir = os.path.dirname(os.path.abspath(__file__)) #current_file_location\r\n    #exe_path = os.path.join(current_dir, relative_path)\r\n    runas_path = os.path.join(os.environ[\'SystemRoot\'], \'System32\', \'runas.exe\')\r\n    try: \r\n        subprocess.run([exe_path], check=True, shell=True)\r\n    except FileNotFoundError:\r\n        print(f"no file: {exe_path}")\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n\r\ndef SN_Product_name_get(file_path):\r\n    with open(file_path, \'r\', encoding=\'utf-8\') as file:\r\n        file_contents = file.read()\r\n    data = json.loads(file_contents)\r\n    key_SN = "Serial_Number"\r\n    key_Product_name = "Model"\r\n    return data[key_SN],data[key_Product_name],file_contents\r\n\r\ndef random_string(random_number):\r\n    request_info = \'{  \\"tool_name\\": \\"PowerStressTest\\",  \\"script_name\\": \\"WlanIntetface-Web-Restart\\",  \\"tool_version\\": \\"2.0.6.3(1.0.2.9)\\"}\'\r\n    test_result = \'{ \\"s0\\": { \\"Idle\\":{\\"unit\\": \\"min\\",\\"count\\": \\"332\\"}, \\"AirplaneMode\\":{ \\"unit\\": \\"round\\", \\"count\\": \\"17\\" }, \\"OnlineStreaming-Test\\":{ \\"unit\\": \\"min\\", \\"count\\": \\"94\\"}}, \\"s4\\": 4, \\"s0i3\\": 4, \\"total\\": 17, \\"restart\\": 6, \\"s0i3tos4\\": 3}\'\r\n    #random_number = random.randint(0, 1)\r\n    if random_number == 0:\r\n        print(request_info)\r\n        return request_info\r\n    else:\r\n        print(test_result)\r\n        return test_result\r\n\r\ndef test_unit_list_approval(serial_number):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        serial_number_condition = f"AND tul.serial_number IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_list AS tul\r\n        WHERE 1=1 {serial_number_condition}\r\n        \'\'\'\r\n        cursor.execute(query, (serial_number,))\r\n        result_SN = cursor.fetchone()\r\n        close_database()\r\n        if result_SN:\r\n            [id, status] = result_SN\r\n            return id, status\r\n        else:\r\n            return None\r\n    except Exception as e:\r\n        print(f"error: {e}")\r\n        print("Error: database connection error")\r\n\r\ndef return_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        close_database()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            return {"tool": "", "task_id": f"{task_id}", "round": 0, "runtime": 0, "script": newstatus, "config": {}}\r\n        else:\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\ndef machine_running_commands(sn_id, status):\r\n    try:\r\n        conn, cursor, close_database = connect_to_database()\r\n        last_update_time = timenow()\r\n        query = f\'\'\'\r\n        UPDATE test_unit_list\r\n        SET status = %s, last_update_time = %s\r\n        WHERE id = %s;\r\n        \'\'\'\r\n        cursor.execute(query, (status,) + (last_update_time,) + (sn_id,)) \r\n\r\n        test_unit_id_condition = f"AND tut.test_unit_id IN (%s)" \r\n        query =f\'\'\'\r\n        SELECT id, status\r\n        FROM test_unit_tasks AS tut\r\n        WHERE 1=1 {test_unit_id_condition} AND add_time IS NOT NULL\r\n        ORDER BY add_time DESC\r\n        limit 1\r\n        \'\'\'\r\n        cursor.execute(query, (sn_id,))\r\n        result = cursor.fetchone()\r\n        if result:\r\n            [task_id, newstatus] = result\r\n            if status == newstatus:\r\n                cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (task_id,))\r\n                close_database()\r\n                return 0\r\n            else:\r\n                close_database()    \r\n                return {\'tool\': \'\', \'task_id\': f\'{task_id}\', \'round\': 0, \'runtime\': 0, \'script\': newstatus, \'config\': {}}\r\n        else:\r\n            close_database()\r\n            return 0\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n\r\n\r\ndef unit_test_start(serial_number, product_name, uut_info, request_info):\r\n    try:\r\n        request_info_json = json.dumps(request_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            sys.exit(-1)\r\n        else:\r\n            try:\r\n                status = \'running\'\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s\r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (status,) + (last_update_time,) +  (uut_info,) + (serial_number,)) \r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], request_info_json, uut_info, status, last_update_time))\r\n                result_unit_task_id = cursor.fetchone()\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n    else:  \r\n        status = \'running\'\r\n        last_update_time = timenow()\r\n        platform_id = 1  #\xe9\xa0\x90\xe8\xa8\xad////\xe9\x80\x99\xe8\xa6\x81\xe6\x94\xb9\r\n        try:\r\n            cursor.execute("INSERT INTO test_unit_list (platform_id, serial_number, status, last_update_time, uut_info) VALUES (%s, %s, %s, %s, %s) RETURNING id", (platform_id, serial_number, status, last_update_time, uut_info)) \r\n            result_unit_list_id = cursor.fetchone()\r\n            print(result_unit_list_id)\r\n            cursor.execute("INSERT INTO unit_task (test_unit_id, request_info, uut_info, status, start_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (result_unit_list_id[0], request_info_json, uut_info, status, last_update_time))\r\n            result_unit_task_id = cursor.fetchone()\r\n            close_database()\r\n            return 0\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)\r\n\r\n\r\ndef unit_test_finish(serial_number, product_name, uut_info, finish_info):\r\n    try:\r\n        finish_info_json = json.dumps(finish_info)\r\n        SN_approval = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if SN_approval:\r\n        if SN_approval[1] == \'running\' or SN_approval[1] == \'pause\':\r\n            last_update_time = timenow()\r\n            try:\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'idle\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n                cursor.execute("INSERT INTO unit_task (test_unit_id, uut_info, status, result_info, finish_time) VALUES (%s, %s, %s, %s, %s) RETURNING id", (SN_approval[0], uut_info, \'finish\', finish_info_json, last_update_time))\r\n                close_database()\r\n                return 0\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_idle(serial_number, product_name, uut_info):\r\n    try:\r\n        [SN_id, status] = test_unit_list_approval(serial_number)\r\n        conn, cursor, close_database = connect_to_database()\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if status == \'idle\':\r\n            sys.exit(return_running_commands(SN_id, status)) \r\n        elif status == \'running\':\r\n            try:\r\n                last_update_time = timenow()\r\n                query = f\'\'\'\r\n                UPDATE test_unit_list\r\n                SET status = %s, last_update_time = %s, uut_info = %s \r\n                WHERE serial_number = %s;\r\n                \'\'\'\r\n                cursor.execute(query, (\'running\',) + (last_update_time,) + (uut_info,) + (serial_number,))\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n            sys.exit(2) #running \r\n        elif status == \'pause\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'pause\', \'config\': {}}"\r\n        elif status == \'finish\':\r\n            return "{\'tool\': \'\', \'task_id\': \'2138\', \'round\': 0, \'runtime\': 0, \'script\': \'finish\', \'config\': {}}"    \r\n        else:   \r\n            sys.exit(-3)\r\n    else:\r\n        sys.exit(-2)\r\n\r\ndef unit_test_running(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'running\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)        \r\n\r\ndef unit_test_pause(serial_number, product_name, uut_info, command):\r\n    try:\r\n        [SN_id, SN_status] = test_unit_list_approval(serial_number)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if SN_id:\r\n        if SN_status == \'pause\':\r\n            print(return_running_commands(SN_id, SN_status))\r\n            sys.exit(0)\r\n        else:\r\n            print(machine_running_commands(SN_id, command))\r\n            sys.exit(0)\r\n    else:\r\n        sys.exit(-2)\r\n\r\n\r\ndef CTH(request_mode:str):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(None)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    \r\n    if sn_pn[0]:\r\n        if request_mode.startswith(\'create_task\'):\r\n            request_info = request_mode[len(\'create_task \'):]\r\n            return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_info)\r\n        if request_mode.startswith(\'power_cycle_info\'):\r\n            test_result = request_mode[len(\'power_cycle_info \'):]\r\n            return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=test_result)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\napp = typer.Typer()\r\n@app.command()\r\ndef create_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_start(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], request_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n\r\n@app.command()\r\ndef end_task(request_mode:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        sn_pn=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if sn_pn[0] and sn_pn[1] and sn_pn[2]:\r\n        return unit_test_finish(serial_number=sn_pn[0], product_name=sn_pn[1], uut_info=sn_pn[2], finish_info=request_mode)\r\n    else: \r\n        sys.exit(-4)\r\n     \r\n@app.command()\r\ndef GetNewTask(command:str, issue:str = typer.Argument(...,callback=ast.literal_eval)):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        if command == \'idle\':\r\n            return unit_test_idle(serial_number=serial_number, product_name=product_name, uut_info=file_content)\r\n        elif command == \'running\':\r\n            return unit_test_running(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        elif command == \'pause\':\r\n            return unit_test_pause(serial_number=serial_number, product_name=product_name, uut_info=file_content, command=command)\r\n        else:\r\n            sys.exit(2)  \r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n@app.command()\r\ndef SetNewTaskReady(taskid:int):\r\n    try:\r\n        uut_info_active(uut_info_path)\r\n        [serial_number, product_name, file_content]=SN_Product_name_get(uut_info_josn_path)\r\n    except Exception as e:\r\n        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n        sys.exit(1)\r\n    if serial_number and product_name and file_content:\r\n        try:\r\n            [SN_id, status] = test_unit_list_approval(serial_number)\r\n        except Exception as e:\r\n            print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n            sys.exit(1)  \r\n        if SN_id:\r\n            try:\r\n                conn, cursor, close_database = connect_to_database()\r\n                query = f\'\'\'\r\n                SELECT status\r\n                FROM test_unit_tasks\r\n                WHERE id = %s \r\n                \'\'\'\r\n                cursor.execute(query, (taskid,))\r\n                result_status = cursor.fetchone()\r\n                if result_status:\r\n                    try:\r\n                        [status] = result_status\r\n                        cursor.execute("DELETE FROM test_unit_tasks WHERE id = %s", (taskid,))\r\n                        last_update_time = timenow()\r\n                        query = f\'\'\'\r\n                        UPDATE test_unit_list\r\n                        SET status = %s, last_update_time = %s\r\n                        WHERE serial_number = %s\r\n                        \'\'\'\r\n                        cursor.execute(query, (status,) + (last_update_time,) + (serial_number,)) \r\n                        close_database()\r\n                        print(0)\r\n                        sys.exit(0)\r\n                    except Exception as e:\r\n                        print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                        sys.exit(1)\r\n                else:\r\n                    sys.exit(-5)\r\n            except Exception as e:\r\n                print(f"error: {e} {inspect.currentframe().f_code.co_name}")\r\n                sys.exit(1)\r\n        else:\r\n            sys.exit(-2)\r\n    else:\r\n        sys.exit(-4)\r\n\r\n\r\n\r\nif __name__ == "__main__":\r\n    app()\r\n\r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n#SetNewTaskReady+SN()+""+TaskID\r\n\r\n\r\n\r\n\r\n\r\n        \r\n\r\n\r\n#print(CTH(random_string(1)))\r\n#print(end_task(random_string(0)))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        ' // Note:None
2024-02-22 11:33:05 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmpcen_8ibx\\3.5.2.1.6_123456.zip' // Note:None
2024-02-22 11:33:36 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmp33bepa_h\\3.3.3.3.zip' // Note:None
2024-02-22 11:37:39 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: [WinError 32] The process cannot access the file because it is being used by another process: 'C:\\Users\\CHBI965\\AppData\\Local\\Temp\\tmp6xuhlsq0\\3.5.2.1.6_123456.zip' // Note:None
2024-02-26 13:03:35 -  C:\Users\CHBI965\Desktop\HP\mysite\cat\cat_views.py/download_cth: expected str, bytes or os.PathLike object, not NoneType // Note:None
2024-02-26 13:04:04 -  C:\Users\CHBI965\Desktop\HP\mysite\cat\cat_views.py/download_cth: expected str, bytes or os.PathLike object, not NoneType // Note:None
2024-02-26 15:04:24 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: cannot access local variable 'cleanup_async' where it is not associated with a value // Note:None
2024-02-26 16:50:22 -  C:\Users\CHBI965\Desktop\HP\mysite\pulsar\pulsar_views.py/download_version: 'NoneType' object is not subscriptable // Note:None
2024-02-26 17:37:50 -  C:\Users\CHBI965\Desktop\HP\mysite\cat\cat_views.py/download_cth: expected str, bytes or os.PathLike object, not NoneType // Note:None
2024-04-19 15:17:50 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: polls/mail_borrow_rent.html // Note:send_mail_fail: Bo Yu Chen
2024-05-02 12:51:20 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: polls/mail_borrow_rent.html // Note:send_mail_fail: Bo Yu Chen
2024-05-02 13:00:22 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: polls/mail_borrow_rent.html // Note:send_mail_fail: Bo Yu Chen
2024-05-02 13:13:15 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: polls/mail_borrow_rent.html // Note:send_mail_fail: Bo Yu Chen
2024-05-02 13:17:05 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: polls/mail_borrow_rent.html // Note:send_mail_fail: Bo Yu Chen
2024-05-02 17:50:13 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/changeplatform: operator does not exist: character varying = text[]
LINE 5:                 WHERE 1=1 AND ul.serial_number IN (ARRAY['5C...
                                                       ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
 // Note:serial_number: 5CG31907YQ
2024-05-02 17:50:13 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/changeplatform: operator does not exist: character varying = text[]
LINE 5:                 WHERE 1=1 AND ul.serial_number IN (ARRAY['5C...
                                                       ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
 // Note:serial_number: 5CD3067639
2024-05-02 17:50:13 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/changeplatform: operator does not exist: character varying = text[]
LINE 5:                 WHERE 1=1 AND ul.serial_number IN (ARRAY['5C...
                                                       ^
HINT:  No operator matches the given name and argument types. You might need to add explicit type casts.
 // Note:serial_number: 5CD207HWKB
2024-05-03 15:55:28 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object is not subscriptable // Note:serial_number: 5CD13960HB
2024-05-03 15:55:28 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object is not subscriptable // Note:serial_number: 00037700BJ
2024-05-03 15:55:28 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object is not subscriptable // Note:serial_number: TGW1030067
2024-05-03 15:55:28 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object is not subscriptable // Note:serial_number: 5CG3170VV3
2024-05-03 15:55:28 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object is not subscriptable // Note:serial_number: 048909
2024-05-03 15:55:28 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object is not subscriptable // Note:serial_number: 5CG3115Z0J
2024-05-03 15:55:28 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object is not subscriptable // Note:send_mail_fail: bill.chang@hp.com
2024-05-03 16:05:51 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object has no attribute 'user_id' // Note:send_mail_fail: bill.chang@hp.com
2024-05-03 16:09:31 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/lendplatform: 'NoneType' object has no attribute 'user_id' // Note:send_mail_fail: bill.chang@hp.com
2024-05-03 16:13:59 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: 'NoneType' object has no attribute 'user_id' // Note:send_mail_fail: Bill Chang
2024-05-03 16:14:34 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: 'NoneType' object has no attribute 'user_id' // Note:send_mail_fail: Bo Yu Chen
2024-05-03 16:24:34 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: 'NoneType' object has no attribute 'user_id' // Note:send_mail_fail: Bo Yu Chen
2024-05-03 16:30:25 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: 'NoneType' object has no attribute 'user_id' // Note:send_mail_fail: Bo Yu Chen
2024-05-03 16:32:03 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: 'NoneType' object has no attribute 'user_id' // Note:send_mail_fail: Bo Yu Chen
2024-05-06 16:28:15 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: send_rent_borrowed_mail() missing 1 required positional argument: 'user' // Note:send_mail_fail: Bo Yu Chen
2024-05-06 16:31:04 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: send_rent_borrowed_mail() missing 1 required positional argument: 'user' // Note:send_mail_fail: Bill Chang
2024-05-06 16:43:15 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 5CG31907YQ
2024-05-06 16:43:15 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 5CD2378J8P
2024-05-06 16:45:58 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 00027711FY
2024-05-06 16:45:58 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 5CD2497YGV
2024-05-06 16:47:19 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 5CD2378J8P
2024-05-06 16:49:46 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 5CD13960HB
2024-05-06 16:50:09 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 5CD13960HB
2024-05-06 16:51:52 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: string indices must be integers, not 'str' // Note:serial_number: 5CD13960HB
2024-05-06 16:55:26 -  C:\Users\CHBI965\Desktop\HP\mysite\polls\views.py/returnplatform: 'str' object has no attribute 'user_email' // Note:serial_number: 5CG3170VV3
